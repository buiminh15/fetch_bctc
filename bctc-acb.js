const axios = require('axios');
const { sendTelegramNotification } = require('./bot');
const { COMPANIES } = require('./constants/companies');
const { insertBCTC, filterNewNames } = require('./bctc');

const YEAR_ID = 1541; // ID danh m·ª•c cho nƒÉm, c·∫ßn c·∫≠p nh·∫≠t n·∫øu thay ƒë·ªïi
const PAGES = [3, 2, 1]; // C√°c trang c·∫ßn ki·ªÉm tra, theo th·ª© t·ª± ∆∞u ti√™n

const axiosRetry = require('axios-retry');

axiosRetry.default(axios, { retries: 3, retryDelay: axiosRetry.exponentialDelay });

console.log('üì¢ [bctc-acb.js:8]', 'running');
async function fetchAndExtractData() {
  try {
    let allNames = [];

    // L·∫∑p qua c√°c trang ∆∞u ti√™n ƒë·ªÉ gom t·∫•t c·∫£ t√™n b√°o c√°o m·ªõi nh·∫•t
    for (const page of PAGES) {
      console.log(`ƒêang ki·ªÉm tra d·ªØ li·ªáu tr√™n trang ${page}...`);
      const response = await axios.get(
        `https://acb.com.vn/api/front/v1/posts?search[categories.category_id:in]=${YEAR_ID}&search[is_active:in]=1&page=${page}&limit=5`,
        {
          headers: {
            'accept': 'application/json',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
          },
          timeout: 60000,
        }
      );

      const posts = response?.data?.data;
      if (!Array.isArray(posts) || posts.length === 0) {
        console.log(`Trang ${page} kh√¥ng c√≥ d·ªØ li·ªáu.`);
        continue;
      }

      // Gom t·∫•t c·∫£ t√™n b√°o c√°o (c√≥ th·ªÉ l√† title ho·∫∑c tr∆∞·ªùng ph√π h·ª£p)
      allNames.push(...posts.map(post => post.title));
    }

    // L·ªçc t√™n b√°o c√°o ch∆∞a c√≥ trong DB
    const newNames = await filterNewNames(allNames, COMPANIES.ACB);
    console.log('üì¢ [bctc-acb.js:44]', newNames);
    if (newNames.length) {
      await insertBCTC(newNames, COMPANIES.ACB);

      // G·ª≠i th√¥ng b√°o Telegram cho t·ª´ng b√°o c√°o m·ªõi
      await Promise.all(
        newNames.map(name =>
          sendTelegramNotification(`B√°o c√°o m·ªõi t·ª´ ACB: ${name}`)
        )
      );
      console.log(`ƒê√£ th√™m ${newNames.length} b√°o c√°o m·ªõi v√† g·ª≠i th√¥ng b√°o.`);
    } else {
      console.log('Kh√¥ng c√≥ b√°o c√°o m·ªõi tr√™n c√°c trang ki·ªÉm tra.');
    }
  } catch (error) {
    if (error.response) {
      console.error('L·ªói t·ª´ API:', error.response.status, error.response.data);
      process.exit(1);
    } else {
      console.error('L·ªói khi fetch d·ªØ li·ªáu:', error.message);
      process.exit(1);
    }
  }
}

fetchAndExtractData();